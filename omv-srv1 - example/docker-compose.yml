version: "3.7"

########################### NETWORKS
# Create traefik network
# docker network create traefik
# docker network create socket_proxy
# Alternatively, you can specify the gateway and subnet to use
# docker network create --gateway 192.168.90.1 --subnet 192.168.90.0/24 traefik
# docker network create --gateway 192.168.91.1 --subnet 192.168.91.0/24 socket_proxy
# Subnet range 192.168.0.0/16 covers 192.168.0.0 to 192.168.255.255

networks:
  traefik:
    name: traefik
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/traefik2/traefik.log
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: always
    security_opt:
      - no-new-privileges:true
    environment:
      - TZ=$TZ
      - GODADDY_API_KEY=$GODADDY_API_KEY
      - GODADDY_API_SECRET=$GODADDY_API_SECRET
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /usr/share/zoneinfo:/usr/share/zoneinfo:ro
      - /var/log/docker/traefik.log:/var/log/docker/traefik.log # for fail2ban - make sure to touch file before starting container
      - $DOCKERDIR/traefik/rules:/rules
      - $DOCKERDIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      traefik:
        ipv4_address: 192.168.90.254
    command:
      - --global.checkNewVersion=false
      - --global.sendAnonymousUsage=false
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.level=WARN
      - --accessLog=true
      - --accessLog.filePath=/var/log/docker/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls.options=tls-opts@file
      - --entrypoints.https.http.tls.certresolver=dns-godaddy
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1 # Pulls wildcard cert for second domain
      - --entrypoints.https.forwardedHeaders.trustedIPs=198.71.244.0/25,198.71.245.0/25,198.71.246.0/25,198.71.247.0/25,198.71.253.0/24,198.71.254.0/24,198.71.255.0/24
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.network=traefik
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      #- --certificatesResolvers.dns-godaddy.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.dns-godaddy.acme.email=$GODADDY_EMAIL
      - --certificatesresolvers.dns-godaddy.acme.storage=/acme.json
      - --certificatesresolvers.dns-godaddy.acme.dnschallenge.provider=godaddy
      - --certificatesresolvers.dns-godaddy.acme.dnschallenge.resolvers=$GODADDY_DNS1,$GODADDY_DNS2
      - --certificatesResolvers.dns-godaddy.acme.dnsChallenge.delayBeforeCheck=90
    labels:
      - traefik.enable=true
      # HTTP Routers
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)
      ## Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal
      ## Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file
      # Global redirection: http to https
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:(www\.)?.+}`)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.middlewares=wwwtohttps
      # Global redirection: https (www.) to https
      - traefik.http.routers.wwwsecure-catchall.rule=HostRegexp(`{host:(www\.).+}`)
      - traefik.http.routers.wwwsecure-catchall.entrypoints=https
      - traefik.http.routers.wwwsecure-catchall.tls=true
      - traefik.http.routers.wwwsecure-catchall.middlewares=wwwtohttps
      # middleware: http(s)://(www.) to  https://
      - traefik.http.middlewares.wwwtohttps.redirectregex.regex=^https?://(?:www\.)?(.+)
      - traefik.http.middlewares.wwwtohttps.redirectregex.replacement=https://$${1}
      - traefik.http.middlewares.wwwtohttps.redirectregex.permanent=true

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    image: thomseddon/traefik-forward-auth:latest
    container_name: oauth
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.oauth-rtr.entrypoints=https
      - traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.oauth-rtr.service=oauth-svc
      - traefik.http.services.oauth-svc.loadbalancer.server.port=$OAUTH_PORT

  # Heimdall - Unified Frontend Alternative
  heimdall:
    image: ghcr.io/linuxserver/heimdall:latest
    container_name: heimdall
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/heimdall:/config
    # ports:
    #   - $HEIMDALL_PORT:80
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.heimdall-rtr.entrypoints=https
      - traefik.http.routers.heimdall-rtr.rule=Host(`$DOMAINNAME`) || Host(`www.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.heimdall-rtr.service=heimdall-svc
      - traefik.http.services.heimdall-svc.loadbalancer.server.port=$HEIMDALL_PORT

  ############################# DATABASE

  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    user: "0"
    volumes:
      - $DOCKERDIR/grafana:/var/lib/grafana
    # ports:
    #   - $GRAFANA_PORT:3000
    networks:
      - traefik
      - default
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.grafana-rtr.entrypoints=https
      - traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.grafana-rtr.service=grafana-svc
      - traefik.http.services.grafana-svc.loadbalancer.server.port=$GRAFANA_PORT

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  qbittorrent:
    image: ghcr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - UMASK=002
      - WEBUI_PORT=$QBITTORRENT_WEBUI
    volumes:
      - $DOCKERDIR/qbittorrent:/config
      - $BASEDIR/Downloads:/downloads
    networks:
      - traefik
    ports:
      - $QBITTORRENT_PORT:6881
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.qbittorrent-rtr.entrypoints=https
      - traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.qbittorrent-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc
      - traefik.http.services.qbittorrent-svc.loadbalancer.server.port=$QBITTORRENT_WEBUI

  ############################# INDEXERS
  ############################# MEDIA

  # AirSonic - Music Server
  airsonic:
    image: ghcr.io/linuxserver/airsonic:latest
    container_name: airsonic
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - JAVA_OPTS=-Dserver.use-forward-headers=true
    volumes:
      - $NASMEDIADIR/Podcasts:/podcasts
      - $NASMEDIADIR/Music:/music
      - $NASMEDIADIR/Music:/media
      - $DOCKERDIR/airsonic/playlists:/playlists
      - $DOCKERDIR/airsonic/config:/config
    # ports:
    #   - $AIRSONIC_PORT:4040
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.airsonic-rtr.entrypoints=https
      - traefik.http.routers.airsonic-rtr.rule=Host(`airsonic.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.airsonic-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.airsonic-rtr.service=airsonic-svc
      - traefik.http.services.airsonic-svc.loadbalancer.server.port=$AIRSONIC_PORT

  # YoutubeDL-Material is a Material Design frontend for youtube-dl
  ytdl_material:
    image: tzahi12345/youtubedl-material:latest
    container_name: youtubedl
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment: 
      - ALLOW_CONFIG_MUTATIONS=true
      - UID=$PUID
      - GID=$PGID
    volumes:
      - $DOCKERDIR/youtubedl:/app/appdata
      - $DOCKERDIR/youtubedl/audio:/app/audio
      - $DOCKERDIR/youtubedl/video:/app/video
      - $DOCKERDIR/youtubedl/subscriptions:/app/subscriptions
      - $DOCKERDIR/youtubedl/users:/app/users
    # ports:
    #   - $YOUTUBEDL_PORT:17442
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.youtubedl-rtr.entrypoints=https
      - traefik.http.routers.youtubedl-rtr.rule=Host(`ytdl.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.youtubedl-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.youtubedl-rtr.service=youtubedl-svc
      - traefik.http.services.youtubedl-svc.loadbalancer.server.port=$YOUTUBEDL_PORT

  # PhotoShow - Image Gallery
  photoshow:
    image: ghcr.io/linuxserver/photoshow:latest
    container_name: photoshow
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/photoshow:/config
      - $DOCKERDIR/photoshow/thumbs:/Thumbs
      - $NASMEDIADIR/Photo:/Pictures:ro
    # ports:
    #   - $PHOTOSHOW_PORT:80
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.photoshow-rtr.entrypoints=https
      - traefik.http.routers.photoshow-rtr.rule=Host(`photoshow.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.photoshow-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.photoshow-rtr.service=photoshow-svc
      - traefik.http.services.photoshow-svc.loadbalancer.server.port=$PHOTOSHOW_PORT

  ############################# MEDIA FILE MANAGEMENT

  ############################# UTILITIES

  # Monitorr - Webfront to live display the status of any webapp or service
  monitorr:
    image: monitorr/monitorr:latest
    container_name: monitorr
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/monitorr:/app
    # ports:
    #   - $MONITORR_PORT:80
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.monitorr-rtr.entrypoints=https
      - traefik.http.routers.monitorr-rtr.rule=Host(`monitorr.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.monitorr-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.monitorr-rtr.service=monitorr-svc
      - traefik.http.services.monitorr-svc.loadbalancer.server.port=$MONITORR_PORT

  # Node Exporter - Exposes a wide variety of hardware- and kernel-related metrics
  # For Grafana
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /:/host:ro,rslave
    network_mode: host
    pid: host
    command:
      - '--path.rootfs=/host'

  # Prometheus - Systems and service monitoring system
  # For Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKERDIR/prometheus:/etc/prometheus
    # ports:
    #   - $PROMETHEUS_PORT:9090
    networks:
      - default

  # Firefox - Web Broswer
  # VNC password not working - check
  firefox:
    image: jlesage/firefox:latest
    container_name: firefox
    restart: unless-stopped
    shm_size: 2g
    security_opt:
      - no-new-privileges:true
      - seccomp:unconfined # October 15, 2020 https://github.com/jlesage/docker-firefox/blob/master/README.md#allowing-the-membarrier-system-call
    environment:
      - USER_ID=$PUID
      - GROUP_ID=$PGID
      - TZ=$TZ
      - UMASK=002
      - KEEP_APP_RUNNING=1
      - CLEAN_TMP_DIR=1
      - DISPLAY_WIDTH=1920
      - DISPLAY_HEIGHT=1080
      - VNC_PASSWD=$FIREFOX_VNC_PASSWD
    volumes:
      - $DOCKERDIR/firefox:/config
      - $BASEDIR/Downloads:/data/downloads
    # ports:
    #   - $FIREFOX_PORT:5800
    networks:
      traefik:
        ipv4_address: 192.168.90.250 # You can specify a static IP
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.firefox-rtr.entrypoints=https
      - traefik.http.routers.firefox-rtr.rule=Host(`firefox.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.firefox-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.firefox-rtr.service=firefox-svc
      - traefik.http.services.firefox-svc.loadbalancer.server.port=$FIREFOX_PORT

  # Bitwarden - Password management solutions
  bitwarden:
    image: bitwardenrs/server:latest
    container_name: bitwarden
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - ADMIN_TOKEN=$ADMIN_TOKEN
      - WEBSOCKET_ENABLED=true
      - SIGNUPS_ALLOWED=false
      - INVITATIONS_ALLOWED=true
      - LOG_FILE=/var/log/docker/bitwarden.log
      - SMTP_HOST=smtp.gmail.com
      - SMTP_FROM=$SMTP_EMAIL
      - SMTP_PORT=587
      - SMTP_SSL=true
      - SMTP_USERNAME=$SMTP_EMAIL
      - SMTP_PASSWORD=$SMTP_PASS
      - DOMAIN=https://bitwarden.$DOMAINNAME
    #  - DISABLE_ADMIN_TOKEN=true ### USE WITH CAUTION!! Access admin page at bitwarden.$DOMAINNAME/admin to send invitations - anyone can access, add authorization!!!
    volumes:
      - $DOCKERDIR/bitwarden:/data
      - /var/log/docker:/var/log/docker
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - $BITWARDEN_PORT:80
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.bitwarden-rtr.priority=1
      - traefik.http.routers.bitwarden-rtr.entrypoints=https
      - traefik.http.routers.bitwarden-rtr.rule=Host(`bitwarden.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.bitwarden-rtr.middlewares=chain-no-auth@file
      ## HTTP Services
      - traefik.http.routers.bitwarden-rtr.service=bitwarden-svc
      - traefik.http.services.bitwarden-svc.loadbalancer.server.port=$BITWARDEN_SVC_PORT
      ## Bitwarden WebSocket
      - traefik.http.routers.bitwardenHub-rtr.priority=2
      - traefik.http.routers.bitwardenHub-rtr.entrypoints=https
      - traefik.http.routers.bitwardenHub-rtr.rule=(Host(`bitwarden.$DOMAINNAME`) && Path(`/notifications/hub`))
      - traefik.http.routers.bitwardenHub-rtr.service=bitwardenHub-svc
      - traefik.http.services.bitwardenHub-svc.loadbalancer.server.port=$BITWARDEN_WS_PORT
      ## Admin Page - Used when DISABLE_ADMIN_TOKEN=true above
      - traefik.http.routers.bitwardenAdmin-rtr.priority=3
      - traefik.http.routers.bitwardenAdmin-rtr.entrypoints=https
      - traefik.http.routers.bitwardenAdmin-rtr.rule=(Host(`bitwarden.$DOMAINNAME`) && Path(`/admin`))
      - traefik.http.routers.bitwardenAdmin-rtr.middlewares=chain-oauth@file
      - traefik.http.routers.bitwardenAdmin-rtr.service=bitwarden-svc

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - DOZZLE_LEVEL=info
      - DOZZLE_TAILSIZE=300
      - DOZZLE_FILTER=status=running
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # ports:
    #   - $DOZZLE_PORT:8080
    networks:
      - traefik
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.dozzle-rtr.entrypoints=https
      - traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)
      ## Middlewares
      - traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.routers.dozzle-rtr.service=dozzle-svc
      - traefik.http.services.dozzle-svc.loadbalancer.server.port=$DOZZLE_PORT

  ############################# SECURITY

  # Fail2ban scans log files and bans IPs that show the malicious signs
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /var/log/docker:/var/log/docker
      - $DOCKERDIR/fail2ban:/data
      - $DOCKERDIR/fail2ban/fail2ban.d:/etc/fail2ban/fail2ban.d
    environment:
      - TZ=$TZ
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=7d # Age at which bans should be purged from the database
      - F2B_IPTABLES_CHAIN=DOCKER-USER # Specifies the iptables chain to which the Fail2Ban rules should be added
      - SSMTP_HOST=smtp.gmail.com
      - SSMTP_PORT=465
      - SSMTP_USER=$SMTP_EMAIL
      - SSMTP_PASSWORD=$SMTP_PASS # Create an "app password" if you use 2FA
      - SSMTP_TLS=YES

  # WireGuard is an extremely simple yet fast and modern VPN
  wireguard:
    image: ghcr.io/linuxserver/wireguard:latest
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - SERVERURL=wireguard.$DOMAINNAME
      - SERVERPORT=$WIREGUARD_PORT
      - PEERS=1
      - PEERDNS=auto
      - INTERNAL_SUBNET=$INTERNAL_SUBNET
      - ALLOWEDIPS=$ALLOWEDIPS
    volumes:
      - $DOCKERDIR/wireguard:/config
      - /lib/modules:/lib/modules
    ports:
      - $WIREGUARD_PORT:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1

  ############################# MAINTENANCE

  # Watchtower - Automating Docker container base image updates.
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - TZ=$TZ
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=$MY_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.gmail.com
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=$SMTP_EMAIL
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=$SMTP_PASS
      - WATCHTOWER_NOTIFICATION_EMAIL_DELAY=2
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --debug --cleanup --schedule "0 30 2 * * *"
    networks:
      - default
